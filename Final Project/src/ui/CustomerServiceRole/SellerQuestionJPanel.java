/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.CustomerServiceRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.BuyerOrganization;
import Business.Organization.CustomerServiceOrganization;
import Business.Organization.Organization;
import static Business.Organization.Organization.Type.Buyer;
import Business.Role.SellerRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Business.WorkQueue.AbstractQuestion;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import ui.SystemAdminRole.SystemAdminWorkAreaJPanel;

/**
 *
 * @author Ke
 */
public class SellerQuestionJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    /**
     * Creates new form RequestLabTestJPanel
     */
    public SellerQuestionJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.business = business;
        populateRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        requestTestJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        questionjTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        requestTestJButton.setBackground(new java.awt.Color(255, 204, 204));
        requestTestJButton.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        requestTestJButton.setForeground(new java.awt.Color(102, 153, 255));
        requestTestJButton.setText("Ask");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });
        add(requestTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 410, -1, -1));

        workRequestJTable.setBackground(new java.awt.Color(204, 255, 204));
        workRequestJTable.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sender", "Question", "Answer", "Solver", "ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 97, 700, 220));

        questionjTextField.setBackground(new java.awt.Color(255, 204, 204));
        add(questionjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 340, 200, -1));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 153, 255));
        jLabel1.setText("Question:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 340, -1, -1));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 153, 255));
        jLabel2.setText("Buyer Service Phone Number: 13742652049");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 30, -1, -1));

        backJButton.setBackground(new java.awt.Color(255, 204, 204));
        backJButton.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        backJButton.setForeground(new java.awt.Color(102, 153, 255));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/3439d73c70642d1039f6fdc9345403a3.jpeg"))); // NOI18N
        jLabel3.setText("jLabel3");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -110, 1260, 880));
    }// </editor-fold>//GEN-END:initComponents

    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        model.setRowCount(0);

        for (AbstractQuestion request : business.getWorkQueue().getWorkRequestList()){
            if(request.getSender()!=null){
                if(request.getSender().getRole()instanceof SellerRole && request.getQuestion()!= null){
                Object[] row = new Object[5];
                row[0] = request.getSender();
                row[1] = request.getQuestion();
                row[2] = request.getAnswer();
                row[3] = request.getSolver();
                row[4] = request;
                /*String result = ((WorkRequest) request).getTestResult();
                row[3] = result == null ? "Waiting" : result;*/

                model.addRow(row);
                }
            }
        }
    }
    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed
        
        String q = questionjTextField.getText();
        
        WorkRequest question = new WorkRequest();
        question.setQuestion(q);
        question.setSender(userAccount);
        
        userAccount.getWorkQueue().getWorkRequestList().add(question);
        business.getWorkQueue().getWorkRequestList().add(question);
        //enterprise.getWorkQueue().getWorkRequestList().add(question);
        
        populateRequestTable();
                
        /*Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof BuyerOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            org.getQuestionDirectory().getQuestionList().add(question);
            userAccount.getQuestionDirectory().getQuestionList().add(question);
        }       
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof CustomerServiceOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(question);
            JOptionPane.showMessageDialog(null, "Please input username or password!");
            //userAccount.getWorkQueue().getWorkRequestList().add(request);
        }*/
        
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField questionjTextField;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
